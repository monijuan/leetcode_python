@[TOC](目录)



其他：

[PAT乙级-【题目+解答】汇总](https://blog.csdn.net/qq_34451909/article/details/104811369)

[PAT甲级-【题目+解答】汇总](https://blog.csdn.net/qq_34451909/article/details/105119913)

[PTA-浙大版《Python 程序设计》AC解答汇总](https://blog.csdn.net/qq_34451909/article/details/107907668)



GitHub：[https://github.com/monijuan/leetcode_python ](https://github.com/monijuan/leetcode_python)



### 【剑指 Offer】

[模拟卷Leetcode【剑指 Offer】Offer_03. 数组中重复的数字_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120969636)

[模拟卷Leetcode【剑指 Offer】Offer_04. 二维数组中的查找_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120988681)

[模拟卷Leetcode【剑指 Offer】Offer_05. 替换空格_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120988714)

[模拟卷Leetcode【剑指 Offer】Offer_06. 从尾到头打印链表_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120990134)

[模拟卷Leetcode【剑指 Offer】Offer_07. 重建二叉树_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120990148)

[模拟卷Leetcode【剑指 Offer】Offer_09. 用两个栈实现队列_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120969364)

[模拟卷Leetcode【剑指 Offer】Offer_10- I. 斐波那契数列_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120990186)

[模拟卷Leetcode【剑指 Offer】Offer_10- II. 青蛙跳台阶问题_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120990206)

[模拟卷Leetcode【剑指 Offer】Offer_11. 旋转数组的最小数字_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121018507)

[模拟卷Leetcode【剑指 Offer】Offer_12. 矩阵中的路径_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121018531)

[模拟卷Leetcode【剑指 Offer】Offer_13. 机器人的运动范围_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121018577)

[模拟卷Leetcode【剑指 Offer】Offer_14- I. 剪绳子_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121018600)

[模拟卷Leetcode【剑指 Offer】Offer_14- II. 剪绳子 II_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121018619)

[模拟卷Leetcode【剑指 Offer】Offer_15. 二进制中1的个数_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121027555)

[模拟卷Leetcode【剑指 Offer】Offer_16. 数值的整数次方_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121027564)

[模拟卷Leetcode【剑指 Offer】Offer_17. 打印从1到最大的n位数_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121027570)

[模拟卷Leetcode【剑指 Offer】Offer_18. 删除链表的节点_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/121027580)





### 【简单】



[模拟卷Leetcode【简单】001. 两数之和_卷子的博客-CSDN博客](https://blog.csdn.net/qq_34451909/article/details/120969284)



###  utils

### 做题脚本

- `test`：直接运行`getResult()`函数，这个函数的定义行可以直接复制题目中的`def`。
- `test_obj` ：是用于需要编写多个类方法的题目，可以根据输入`函数名（str）`找对应的函数名执行程序，并且兼容了是否有参数的情况。



```python
class Solution:
    def __init__(self):
        pass

    def getResult(self, args):
        return


def test(data_test):
    s = Solution()
    return s.getResult(*data_test)


def test_obj(data_test):
    result = [None]
    obj = Solution(*data_test[1][0])
    for fun, data in zip(data_test[0][1::], data_test[1][1::]):
        if data:
            res = obj.__getattribute__(fun)(*data)
        else:
            res = obj.__getattribute__(fun)()
        result.append(res)
    return result


if __name__ == '__main__':
    datas = [
        [],
    ]
    for data_test in datas:
        t0 = time.time()
        print('-' * 50)
        print('input:', data_test)
        print('output:', test(data_test))
        print(f'use time:{time.time() - t0}s')

```



#### 各种import

```python
from typing import List,Callable,Optional
```



#### 各种Node

```python
class Node_116:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        """116. 填充每个节点的下一个右侧节点指针"""
        self.val = val
        self.left = left
        self.right = right
        self.next = next

class Node_430:
    def __init__(self, val, prev, next, child):
        """430. 扁平化多级双向链表"""
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

    def __str__(self):
        res = f'[{self.val},l:{self.left},r:{self.right}]'
        return res
```



> 占坑，等待更新
> 最近更新日期：2021.10.29