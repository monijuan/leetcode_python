# -*- coding: utf-8 -*-
# @Time    : 2022/5/8 10:26
# @Author  : 模拟卷
# @Github  : https://github.com/monijuan
# @CSDN    : https://blog.csdn.net/qq_34451909
# @File    : 6059AC. 检查是否有合法括号字符串路径.py
# @Software: PyCharm 
# ===================================
"""一个括号字符串是一个 非空 且只包含 '(' 和 ')' 的字符串。如果下面 任意 条件为 真 ，那么这个括号字符串就是 合法的 。

字符串是 () 。
字符串可以表示为 AB（A 连接 B），A 和 B 都是合法括号序列。
字符串可以表示为 (A) ，其中 A 是合法括号序列。
给你一个 m x n 的括号网格图矩阵 grid 。网格图中一个 合法括号路径 是满足以下所有条件的一条路径：

路径开始于左上角格子 (0, 0) 。
路径结束于右下角格子 (m - 1, n - 1) 。
路径每次只会向 下 或者向 右 移动。
路径经过的格子组成的括号字符串是 合法 的。
如果网格图中存在一条 合法括号路径 ，请返回 true ，否则返回 false 。



示例 1：



输入：grid = [["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]
输出：true
解释：上图展示了两条路径，它们都是合法括号字符串路径。
第一条路径得到的合法字符串是 "()(())" 。
第二条路径得到的合法字符串是 "((()))" 。
注意可能有其他的合法括号字符串路径。
示例 2：



输入：grid = [[")",")"],["(","("]]
输出：false
解释：两条可行路径分别得到 "))(" 和 ")((" 。由于它们都不是合法括号字符串，我们返回 false 。


提示：

m == grid.length
n == grid[i].length
1 <= m, n <= 100
grid[i][j] 要么是 '(' ，要么是 ')' 。
"""
from leetcode_python.utils import *


class Solution_tle:
    def hasValidPath(self, grid: List[List[str]]) -> bool:
        height, width = len(grid), len(grid[0])
        print(height,width)
        if (height+width)%2==0:return False
        max_cntl = (height+width)>>1

        def dfs(i, j, mx, mn,cntl):
            if grid[i][j] == '(':
                diff = 1
                cntl+=1
            else:
                diff = -1
            mx += diff
            mn = max(mn + diff, (i + j + 1) % 2)
            if cntl > max_cntl or mx < mn:
                return False
            elif i == height - 1 and j == width - 1:
                return mn == 0
            elif i < height - 1 and j < width - 1:
                return dfs(i + 1, j, mx, mn,cntl) or dfs(i, j + 1, mx, mn,cntl)
            elif i < height - 1:
                return dfs(i + 1, j, mx, mn,cntl)
            elif j < width - 1:
                return dfs(i, j + 1, mx, mn,cntl)
            else:
                raise ValueError(f'i:{i}, j:{j}')

        return dfs(0, 0, 0, 0, 0)


class Solution:
    def hasValidPath(self, grid: List[List[str]]) -> bool:
        height, width = len(grid), len(grid[0])
        if grid[0][0] == ")" or (height+width)%2==0:
            return False

        @lru_cache(None)
        def dfs(i, j, z):
            if i == height - 1 and j == width - 1 and z == 0:
                return True
            res = False
            if i + 1 < height:
                if grid[i + 1][j] == "(":
                    res |= dfs(i + 1, j, z + 1)
                elif z:
                    res |= dfs(i + 1, j, z - 1)
            if j + 1 < width:
                if grid[i][j + 1] == "(":
                    res |= dfs(i, j + 1, z + 1)
                elif z:
                    res |= dfs(i, j + 1, z - 1)
            return res

        return dfs(0, 0, 1)

def test(data_test):
    s = Solution()
    data = data_test  # normal
    # data = [List2Node(data_test[0])]  # list转node
    return s.hasValidPath(*data)


def test_obj(data_test):
    result = [None]
    obj = Solution(*data_test[1][0])
    for fun, data in zip(data_test[0][1::], data_test[1][1::]):
        if data:
            res = obj.__getattribute__(fun)(*data)
        else:
            res = obj.__getattribute__(fun)()
        result.append(res)
    return result


if __name__ == '__main__':
    datas = [
        # [[["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]],
        # [[["(", ")", "(", "("], ["(", ")", ")", "("], [")", "(", ")", ")"], [")", "(", "(", "("], ["(", ")", "(", "("], ["(", ")", "(", "("],[")", ")", "(", ")"]]],
        # [[["(","(",")",")","}

    ]
    for data_test in datas:
        t0 = time.time()
        print('-' * 50)
        print('input:', data_test)
        print('output:', test(data_test))
        print(f'use time:{time.time() - t0}s')
