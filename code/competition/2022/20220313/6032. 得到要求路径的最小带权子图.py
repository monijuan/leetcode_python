# -*- coding: utf-8 -*-
# @Time    : 2022/3/11 21:56
# @Author  : 模拟卷
# @Github  : https://github.com/monijuan
# @CSDN    : https://blog.csdn.net/qq_34451909
# @File    : 6032. 得到要求路径的最小带权子图.py
# @Software: PyCharm 
# ===================================
"""给你一个整数 n ，它表示一个 带权有向 图的节点数，节点编号为 0 到 n - 1 。

同时给你一个二维整数数组 edges ，其中 edges[i] = [fromi, toi, weighti] ，表示从 fromi 到 toi 有一条边权为 weighti 的 有向 边。

最后，给你三个 互不相同 的整数 src1 ，src2 和 dest ，表示图中三个不同的点。

请你从图中选出一个 边权和最小 的子图，使得从 src1 和 src2 出发，在这个子图中，都 可以 到达 dest 。如果这样的子图不存在，请返回 -1 。

子图 中的点和边都应该属于原图的一部分。子图的边权和定义为它所包含的所有边的权值之和。



示例 1：



输入：n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5
输出：9
解释：
上图为输入的图。
蓝色边为最优子图之一。
注意，子图 [[1,0,3],[0,5,6]] 也能得到最优解，但无法在满足所有限制的前提下，得到更优解。
示例 2：



输入：n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2
输出：-1
解释：
上图为输入的图。
可以看到，不存在从节点 1 到节点 2 的路径，所以不存在任何子图满足所有限制。


提示：

3 <= n <= 105
0 <= edges.length <= 105
edges[i].length == 3
0 <= fromi, toi, src1, src2, dest <= n - 1
fromi != toi
src1 ，src2 和 dest 两两不同。
1 <= weight[i] <= 105
"""
from leetcode_python.utils import *


class CGraph_weight():
    def __init__(self, edges):
        self.link_dict = defaultdict(dict)

        for s, e, w in edges:
            if e in self.link_dict[s]:
                self.link_dict[s][e] = min(self.link_dict[s][e], w)
            else:
                self.link_dict[s][e] = w

    def bfs(self, source):
        """ 单源最短路径 """
        source2end = {}
        to_visit = [[0, source]]

        while len(to_visit) > 0:
            cost, pnow = heapq.heappop(to_visit)
            if pnow in source2end: continue
            source2end[pnow] = cost
            for pnext in self.link_dict[pnow]:
                if pnext in source2end: continue
                heapq.heappush(to_visit, [cost + self.link_dict[pnow][pnext], pnext])
        return source2end


class Solution:
    def minimumWeight(self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int) -> int:

        cgraph = CGraph_weight(edges)
        rcgraph = CGraph_weight([[t, s, w] for s, t, w in edges])
        dis1 = cgraph.bfs(src1)
        dis2 = cgraph.bfs(src2)
        dist = rcgraph.bfs(dest)
        # print(dis1)
        # print(dis2)
        # print(dist)
        to_ret = 1e99
        for mid in range(n):
            if mid in dis1 and mid in dis2 and mid in dist:
                to_ret = min(to_ret, dis1[mid] + dis2[mid] + dist[mid])
        if to_ret > 1e88:
            return -1
        return to_ret

inf=sys.maxsize
class Solution_wtl:
    def floyd(self):
        for k in range(self.n):
            for i in range(self.n):
                for j in range(self.n):
                    if self.graph[i][k]!=inf and inf !=self.graph[k][j]:
                        self.graph[i][j] = min(self.graph[i][j],self.graph[i][k] + self.graph[k][j])
                    # i_k_j = self.graph[i][k] + self.graph[k][j]
                    # if i_k_j < self.graph[i][j]:
                    #     self.graph[i][j] = i_k_j
                        # self.parents[i][j] = self.parents[k][j]

    def minimumWeight(self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int) -> int:
        self.n = n
        self.graph = [[(lambda x: 0 if x[0] == x[1] else inf)([i, j]) for j in range(n)] for i in range(n)]

        # self.graph = [[0]*n for _ in range(n)]
        # self.parents = [[i] * n for i in range(n)]
        for f,t,w in edges:
            self.graph[f][t]=min(self.graph[f][t],w)
        # for r in self.graph:print(r)
        self.floyd()
        # print('-'*50)
        # for r in self.graph:print(r)

        res = inf
        for i in range(n):
            res = min(res,self.graph[src1][i]+self.graph[src2][i]+self.graph[i][dest])
        return res if res<inf else -1


def test(data_test):
    s = Solution()
    data = data_test  # normal
    # data = [list2node(data_test[0])]  # list转node
    return s.minimumWeight(*data)


def test_obj(data_test):
    result = [None]
    obj = Solution(*data_test[1][0])
    for fun, data in zip(data_test[0][1::], data_test[1][1::]):
        if data:
            res = obj.__getattribute__(fun)(*data)
        else:
            res = obj.__getattribute__(fun)()
        result.append(res)
    return result


if __name__ == '__main__':
    datas = [
        # [6,[[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]],0,1,5],
        # [5,[[4,2,20],[4,3,46],[0,1,15],[0,1,43],[0,1,32],[3,1,13]],0,4,1],
        [891,[[222,104,521],[222,580,698],[222,577,941],[483,17,493],[222,155,370],[222,312,603],[483,877,446],[222,749,948],[222,93,370],[483,182,198],[222,156,805],[222,527,810],[222,485,7],[483,479,768],[222,597,682],[222,659,187],[483,404,425],[483,650,594],[483,552,60],[222,766,901],[222,49,233],[222,626,631],[483,582,605],[222,370,939],[222,272,904],[483,299,248],[222,725,558],[222,246,647],[222,684,189],[222,218,422],[483,544,227],[222,41,824],[222,814,855],[483,367,549],[483,115,218],[222,791,982],[483,506,167],[483,636,89],[222,567,704],[483,540,617],[483,36,109],[483,496,957],[483,425,732],[222,670,15],[222,802,110],[483,395,134],[483,112,501],[483,233,557],[483,623,673],[222,562,648],[222,211,86],[222,181,206],[483,649,451],[483,621,91],[222,672,566],[483,417,619],[222,229,424],[483,372,396],[483,656,687],[222,667,543],[483,354,360],[222,158,108],[222,285,674],[483,330,43],[222,694,225],[483,290,20],[483,27,245],[483,646,102],[222,855,79],[222,665,898],[222,572,283],[222,284,363],[483,578,966],[222,495,156],[483,111,276],[483,583,439],[483,328,162],[483,75,295],[483,390,507],[222,530,39],[483,480,1000],[222,886,121],[483,94,151],[483,515,928],[222,89,839],[222,221,250],[222,733,895],[483,624,787],[222,362,732],[222,396,608],[222,108,393],[222,620,846],[483,215,879],[483,380,750],[483,60,110],[222,40,436],[483,298,145],[483,550,432],[483,847,850],[222,2,851],[483,477,948],[222,103,648],[222,654,462],[222,617,47],[222,338,687],[222,378,50],[222,576,563],[222,539,77],[222,292,641],[483,536,192],[222,90,837],[222,78,432],[222,708,980],[483,568,666],[222,780,737],[222,344,982],[222,234,729],[222,339,285],[222,63,959],[222,581,382],[222,377,774],[483,729,536],[483,278,195],[222,827,553],[483,815,234],[222,489,88],[483,790,87],[222,525,644],[483,201,999],[222,456,601],[483,227,705],[483,86,268],[483,20,273],[483,657,335],[483,880,152],[483,792,324],[483,758,449],[483,826,994],[483,276,727],[222,863,979],[222,822,31],[483,590,110],[222,695,356],[222,535,860],[222,603,774],[483,447,982],[222,212,11],[483,61,435],[483,736,44],[483,555,274],[222,533,596],[483,868,718],[222,490,668],[483,80,656],[483,381,386],[222,142,167],[483,700,927],[222,507,844],[222,835,80],[222,493,133],[483,268,214],[222,481,6],[483,887,356],[222,435,529],[483,865,848],[483,360,933],[222,804,274],[483,133,41],[222,713,473],[483,561,606],[483,183,598],[483,85,287],[222,320,192],[483,769,50],[222,565,87],[483,334,92],[483,314,702],[483,277,473],[222,428,674],[222,122,343],[222,170,638],[483,317,353],[222,523,284],[222,474,380],[222,145,997],[222,468,997],[222,128,299],[222,224,607],[222,361,556],[222,777,785],[483,291,748],[222,13,65],[222,323,492],[222,163,282],[222,622,135],[222,398,201],[222,358,37],[483,606,605],[483,735,283],[483,349,424],[222,68,976],[222,831,922],[483,209,256],[222,7,583],[222,172,665],[222,884,900],[222,261,924],[222,178,62],[222,437,242],[483,407,511],[483,101,358],[222,420,713],[483,610,962],[222,779,968],[483,743,647],[483,553,508],[483,845,601],[483,123,481],[483,327,156],[483,202,278],[483,705,328],[483,33,872],[483,611,23],[483,564,836],[483,486,895],[222,888,842],[483,269,378],[483,439,899],[483,120,249],[222,697,278],[222,692,565],[483,426,273],[483,502,50],[222,242,524],[483,171,420],[483,431,585],[222,433,118],[483,130,749],[222,249,649],[222,574,288],[483,442,11],[222,37,317],[483,416,713],[483,99,287],[483,43,271],[222,599,605],[483,685,629],[483,205,859],[483,160,648],[483,765,877],[483,664,48],[222,702,710],[222,528,921],[222,566,926],[222,467,842],[483,179,393],[483,652,638],[222,755,577],[222,118,252],[222,573,563],[222,737,288],[483,117,501],[222,149,494],[222,503,367],[483,594,522],[483,38,167],[222,813,469],[483,331,410],[483,368,574],[222,781,512],[483,715,590],[483,547,629],[483,516,752],[222,726,516],[222,836,738],[222,759,299],[222,393,62],[483,679,58],[483,602,970],[222,440,422],[483,704,984],[483,739,584],[483,241,518],[483,64,600],[222,214,46],[222,630,680],[483,448,715],[222,355,880],[222,114,16],[483,113,997],[222,166,869],[222,712,780],[222,648,948],[483,856,124],[483,741,663],[222,689,381],[483,832,92],[222,608,558],[222,26,526],[222,497,702],[483,811,98],[483,461,189],[222,125,680],[483,678,99],[222,482,772],[222,843,187],[222,545,86],[222,307,248],[483,217,348],[222,255,668],[222,286,35],[222,509,91],[483,874,907],[222,109,776],[483,250,380],[483,324,112],[222,771,130],[222,251,984],[222,873,12],[483,732,847],[222,134,926],[483,137,349],[222,734,444],[483,174,321],[483,531,299],[222,861,958],[222,98,932],[222,187,547],[483,154,47],[483,244,421],[483,742,294],[222,288,454],[483,345,436],[222,750,675],[483,397,946],[222,260,989],[483,645,266],[222,208,676],[483,423,315],[483,72,302],[483,660,489],[483,833,340],[483,514,760],[222,223,636],[222,546,419],[222,604,761],[483,640,24],[483,842,471],[222,818,306],[222,266,660],[222,499,497],[222,890,929],[222,281,305],[483,127,693],[222,789,69],[222,262,290],[483,21,587],[483,817,952],[483,728,721],[483,193,453],[222,73,526],[222,88,383],[483,883,850],[222,464,315],[483,508,793],[483,710,587],[222,364,932],[483,801,735],[222,760,790],[483,686,67],[483,785,703],[222,844,926],[222,258,553],[222,294,60],[222,747,133],[483,0,695],[483,807,875],[222,308,842],[222,642,408],[483,653,422],[222,58,585],[222,305,422],[483,313,560],[483,352,512],[222,121,992],[483,538,688],[483,50,920],[222,850,708],[483,74,696],[222,691,644],[222,23,715],[483,265,546],[483,834,19],[483,709,409],[483,797,724],[222,501,654],[483,473,714],[222,392,335],[222,190,716],[222,677,100],[483,110,363],[222,798,978],[483,213,407],[483,29,584],[222,424,678],[483,66,78],[483,484,458],[483,511,827],[483,126,934],[483,860,918],[483,783,516],[222,806,817],[483,351,213],[483,746,176],[222,157,519],[483,803,34],[483,76,801],[483,102,527],[483,84,230],[222,591,706],[222,333,106],[483,176,484],[483,394,583],[222,491,927],[222,522,175],[222,59,981],[483,8,300],[483,635,818],[483,230,11],[222,257,848],[483,79,889],[222,866,169],[483,459,910],[483,455,541],[222,16,134],[483,148,266],[483,786,188],[483,470,266],[222,707,486],[483,429,813],[222,666,179],[222,106,797],[483,816,610],[222,829,502],[483,303,282],[483,764,602],[483,343,122],[483,206,844],[483,92,808],[222,132,51],[483,293,509],[222,6,594],[222,226,934],[222,754,219],[222,751,329],[483,22,737],[222,852,554],[222,376,753],[222,799,775],[222,357,970],[222,875,399],[222,240,938],[483,225,590],[483,220,739],[222,589,543],[222,644,838],[222,259,887],[483,195,902],[483,805,511],[222,717,747],[222,569,626],[222,200,664],[483,238,306],[222,487,846],[222,681,965],[222,800,873],[222,422,417],[483,557,293],[483,808,100],[483,663,938],[222,558,342],[222,688,719],[222,159,617],[483,699,566],[222,869,910],[222,593,348],[222,311,777],[222,248,640],[222,309,327],[483,721,658],[483,196,781],[222,454,758],[222,748,430],[222,658,156],[222,67,119],[483,438,384],[483,830,285],[222,267,143],[222,788,975],[483,247,127],[222,613,484],[483,39,730],[483,54,121],[222,283,355],[222,197,932],[222,164,296],[222,724,106],[483,839,310],[483,180,385],[483,254,713],[483,762,269],[222,405,585],[222,637,357],[222,270,759],[483,151,310],[483,542,813],[222,500,713],[483,282,442],[483,124,375],[222,619,662],[483,143,829],[222,12,107],[483,185,979],[483,188,257],[222,194,845],[222,879,992],[222,451,857],[483,795,481],[483,165,439],[222,340,369],[483,680,308],[483,543,539],[483,56,536],[483,655,782],[222,279,5],[222,651,528],[222,245,532],[222,698,355],[483,162,492],[483,854,549],[483,186,845],[222,696,342],[222,752,331],[483,47,761],[222,444,464],[222,775,754],[483,575,623],[483,232,241],[222,359,828],[222,841,114],[222,297,774],[483,876,911],[483,600,635],[222,204,606],[222,848,929],[483,639,721],[483,287,880],[222,46,44],[222,587,532],[222,415,801],[483,207,863],[483,505,239],[222,3,173],[222,723,736],[222,821,576],[222,718,700],[483,385,952],[222,554,667],[483,310,318],[222,28,43],[483,774,723],[222,770,619],[222,419,464],[483,32,186],[483,838,918],[222,475,355],[483,706,453],[483,443,803],[222,675,223],[222,510,986],[483,615,561],[222,592,86],[222,96,253],[483,840,141],[222,55,569],[222,693,386],[222,399,799],[222,203,285],[222,146,224],[222,889,65],[483,169,977],[222,849,987],[483,662,847],[222,701,327],[222,408,792],[483,661,435],[483,237,574],[222,105,704],[483,192,143],[222,82,614],[222,745,476],[483,548,664],[483,870,587],[483,318,9],[483,881,249],[222,271,447],[483,768,778],[222,219,258],[222,19,87],[483,862,109],[222,62,355],[483,714,426],[483,614,185],[222,601,874],[483,4,625],[483,264,768],[483,236,408],[222,70,612],[483,504,960],[483,837,141],[483,595,63],[483,673,542],[222,302,634],[222,521,308],[483,859,366],[483,633,652],[222,828,954],[222,263,914],[222,253,362],[483,116,617],[483,356,185],[222,761,513],[222,403,623],[483,690,928],[483,144,77],[222,476,657],[483,631,357],[483,239,430],[222,794,330],[222,722,351],[483,824,96],[222,1,565],[483,410,382],[222,280,422],[222,25,78],[222,177,458],[222,173,861],[222,634,758],[483,391,661],[222,796,361],[483,382,714],[222,306,438],[483,727,804],[483,147,501],[483,369,269],[222,45,264],[483,57,150],[483,551,828],[483,401,405],[483,198,69],[483,498,430],[483,9,876],[222,579,465],[222,716,321],[483,371,838],[483,321,566],[483,316,963],[222,131,647],[483,871,211],[483,322,359],[222,598,136],[222,97,472],[483,793,611],[222,48,781],[222,153,388],[222,676,535],[483,441,782],[222,216,47],[483,492,147],[483,682,989],[483,402,38],[483,719,581],[222,252,118],[483,772,936],[483,374,537],[483,740,393],[483,18,472],[222,478,263],[222,671,876],[483,609,531],[222,537,418],[222,872,603],[483,386,794],[222,812,852],[483,335,276],[483,210,764],[222,353,628],[222,383,976],[222,632,650],[483,520,171],[483,95,563],[222,434,612],[483,184,869],[222,418,408],[483,139,571],[222,274,582],[222,778,255],[483,326,738],[483,744,84],[483,607,456],[483,342,657],[222,858,325],[222,605,621],[483,30,610],[222,730,539],[483,556,536],[222,150,65],[222,421,903],[483,627,59],[222,588,534],[222,753,49],[483,469,612],[222,34,479],[483,289,93],[483,301,539],[483,400,912],[222,851,109],[483,140,758],[483,494,160],[222,275,80],[222,235,336],[483,436,487],[222,757,35],[222,135,228],[483,167,439],[222,513,590],[222,375,419],[483,412,633],[222,366,942],[483,782,318],[222,586,237],[222,119,377],[222,647,731],[222,71,415],[483,319,371],[222,463,144],[222,853,965],[222,472,825],[483,641,591],[222,549,907],[483,674,183],[222,304,799],[483,413,304],[222,449,452],[483,820,87],[222,168,486],[483,857,425],[222,81,450],[222,191,370],[222,638,525],[483,819,742],[222,348,241],[483,273,786],[222,69,982],[222,541,50],[222,11,413],[483,738,732],[222,465,900],[483,406,453],[483,231,839],[483,189,742],[483,571,873],[222,52,986],[483,446,523],[483,612,64],[483,389,902],[483,512,354],[483,42,425],[222,458,783],[483,687,880],[483,199,559],[222,462,189],[222,616,109],[483,720,3],[483,65,246],[483,524,312],[222,365,999],[222,77,552],[222,24,424],[483,823,196],[483,787,923],[222,175,980],[222,756,483],[222,584,605],[222,867,41],[483,427,182],[483,618,546],[483,809,271],[222,387,278],[222,100,504],[222,53,747],[222,51,802],[483,668,406],[483,107,908],[483,452,289],[222,825,819],[483,532,881],[483,517,96],[222,453,999],[222,332,660],[483,763,725],[222,388,307],[483,466,45],[222,411,179],[483,629,163],[222,776,132],[222,596,893],[222,87,817],[483,585,880],[483,450,558],[222,337,550],[222,329,931],[222,414,182],[222,643,735],[483,488,547],[222,432,8],[222,152,89],[222,559,640],[483,669,572],[222,529,24],[483,457,61],[483,379,571],[483,810,353],[483,384,572],[222,430,934],[222,315,290],[222,518,788],[222,228,39],[483,570,846],[222,625,675],[222,336,121],[483,129,523],[222,784,195],[483,445,883],[222,300,334],[222,628,974],[222,846,22],[222,256,430],[483,409,534],[222,83,354],[483,471,496],[483,295,765],[222,703,918],[483,878,809],[222,347,653],[222,885,386],[222,161,456],[222,363,115],[483,711,135],[222,44,443],[222,15,735],[222,14,556],[222,560,533],[222,31,973],[483,296,865],[222,519,546],[483,683,819],[483,10,217],[222,341,555],[222,563,56],[483,91,418],[483,346,575],[483,138,519],[222,882,593],[222,731,328],[222,141,89],[222,35,668],[483,526,755],[483,136,282],[483,373,484],[483,243,771],[483,460,598],[483,534,470],[483,767,575],[222,5,670],[483,773,128],[483,325,637],[222,864,193],[483,350,170],[888,350,68],[66,350,316]],222,483,350],
    ]
    for data_test in datas:
        t0 = time.time()
        print('-' * 50)
        print('input:', data_test)
        print('output:', test(data_test))
        print(f'use time:{time.time() - t0}s')

